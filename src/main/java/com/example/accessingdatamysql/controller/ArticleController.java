package com.example.accessingdatamysql.controller;

import com.example.accessingdatamysql.articlerepo.ArticleRepository;
import com.example.accessingdatamysql.model.Article;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/articles") // This means URL's start with /demo (after Application path)
public class ArticleController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ArticleRepository articleRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    //removed kids
    public @ResponseBody String addNewArticle(@RequestParam String by, @RequestParam int descendents,
                                              @RequestParam int score,
                                              @RequestParam int time, @RequestParam String title,
                                              @RequestParam String type, @RequestParam String url) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Article article = new Article();
        article.setBy(by);
        article.setDescendants(descendents);
        //article.setKids(kids);
        article.setScore(score);
        article.setTime(time);
        article.setTitle(title);
        article.setTitle(type);
        article.setUrl(url);
        //save method is not being recognized
        //ArticleRepository.save(article);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Article> getAllArticles() {
        // This returns a JSON or XML with the articles
        return articleRepository.findAll();
    }
}